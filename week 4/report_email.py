#!/usr/bin/env python3

# Import all the necessary libraries(os, datetime and reports) that will be used to process the text data from the supplier-data/descriptions directory into the format below:

# name: Apple

# weight: 500 lbs

# [blank line]

# name: Avocado

# weight: 200 lbs

# [blank line]

import os
import os.path
import datetime
import reports
import emails

def main():
    # Create a variable named now and set it to the current date and time.
    now = datetime.datetime.now()
    # # Create a variable named filename and set it to the name of the file that you will create.
    # filename = "processed-" + now.strftime("%Y-%m-%d-%H-%M-%S") + ".pdf"
    # # Create a variable named title and set it to the title of the report.
    # title = "Processed Update on " + now.strftime("%Y-%m-%d")
    # # Create a variable named additional_info and set it to the additional information that you want to include in the report.
    # additional_info = "This report was generated by the generate_report() function in the report_email.py script."
    # # Create a variable named table_data and set it to the data that you want to include in the report.
    # table_data = [["name", "weight"], ["Apple", "500 lbs"], ["Avocado", "200 lbs"]]
    # # Call the generate_report() function and pass the necessary parameters to create the report.
    # reports.generate_report(filename, title, additional_info, table_data)
    # # Call the send_report() function and pass the necessary parameters to send the report.
    # reports.send_report(filename, "processed.pdf", "processed.pdf")
    paragraphs = []
    for filename in os.listdir(os.path.join(os.path.dirname(__file__), "supplier-data/descriptions")):
        if filename.endswith(".txt"):
            with open(os.path.join(os.path.dirname(__file__), "supplier-data/descriptions/", filename), 'r') as opened:
                data = opened.read()
                #You will need to pass the following arguments to the reports.generate_report method: the text description processed from the text files as the paragraph argument, the report title as the title argument, and the file path of the PDF to be generated as the attachment argument (use ‘/tmp/processed.pdf')
                #   reports.generate_report(attachment, title, paragraph)
                #the text description processed from the text files as the paragraph argument,
                # paragaraph must be name and weight of the fruit and the weight of the fruit as the paragraph argument
                print(data, "data")
                paragraph = data.split("\n")    
                paragraphs.append(["name: " + paragraph[0], "weight: "  + paragraph[1]])
                print(paragraphs, "paragraphs")
                print(filename)
                #the report title as the title argument,
    title = "Processed Update on " + now.strftime("%Y-%m-%d")
    #the file path of the PDF to be generated as the attachment argument (use ‘/tmp/processed.pdf')
    attachment = "/tmp/processed.pdf"
    # Call the generate_report() function and pass the necessary parameters to create the report.
    reports.generate_report(attachment, title, paragraphs)


# Once you have completed this, call the main method which will process the data and call the generate_report method from the reports module:
if __name__ == "__main__":
    main()
    message = emails.generate_email("automation@example.com", 
    "student-03-6f0236cecae1@example.com", "Upload Completed - Online Fruit Store",
"All fruits are uploaded to our website successfully. A detailed list is attached to this email",
# Attach the path to the file processed.pdf
"/tmp/processed.pdf")
    emails.send_email(message)

    