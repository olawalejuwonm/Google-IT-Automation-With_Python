#!/usr/bin/env python3
#Write a script to generate two different reports based on the ranking of errors generated by the system and the user usage statistics for the service. You'll write the script on your own, but we'll guide you throughout.

# First, import all the Python modules that you'll use in this Python script. After importing the necessary modules, initialize two dictionaries: one for the number of different error messages and another to count the number of entries for each user (splitting between INFO and ERROR).

# Now, parse through each log entry in the syslog.log file by iterating over the file.

# For each log entry, you'll have to first check if it matches the INFO or ERROR message formats. You should use regular expressions for this. When you get a successful match, add one to the corresponding value in the per_user dictionary. If you get an ERROR message, add one to the corresponding entry in the error dictionary by using proper data structure.

# After you've processed the log entries from the syslog.log file, you need to sort both the per_user and error dictionary before creating CSV report files.

# Keep in mind that:

# The error dictionary should be sorted by the number of errors from most common to least common.
# The user dictionary should be sorted by username.
# Insert column names as ("Error", "Count") at the zero index position of the sorted error dictionary. And insert column names as ("Username", "INFO", "ERROR") at the zero index position of the sorted per_user dictionary.

# After sorting these dictionaries, store them in two different files: error_message.csv and user_statistics.csv.

import re
import csv
import sys
import subprocess
import operator

#import syslog.log file in ./ directory
logs = open("week 7/syslog.log", "r")
logs_list = logs.readlines()
theErrors = {}
theUsers = {}


#iterate through each line in the log file
for line in logs_list:
    print(line)
    #Example line: Jan 31 21:02:06 ubuntu.local ticky: ERROR Connection to DB failed (breee)
    isError = re.search(r'(ticky: ERROR) ([\w ]*)', line)
    isInfo = re.search(r'(ticky: INFO) ([\w ]*)', line)
    #get this username (breee) from the line
    username = re.search(r'\((.*)\)', line)
    theUsername = username.group(1)
    if isError:
        errMsg = isError.group(2)
        print(isError.group(2))
        #save the error message to theErrors dictionary
        if errMsg in theErrors:
            theErrors[errMsg] += 1
        else:
            theErrors[errMsg] = 1
        if theUsername in theUsers:
            theUsers[theUsername]["ERROR"] += 1
        else:
            theUsers[theUsername] = {"INFO": 0, "ERROR": 1}
    elif isInfo:
        infoMsg = isInfo.group(2)
        # theUsers[line] = theUsers.get(line, 0) + 1
        if theUsername in theUsers:
            theUsers[theUsername]["INFO"] += 1
        else:
            theUsers[theUsername] = {"INFO": 1, "ERROR": 0}
    # print(isError)
    # print(isInfo)
#Insert column names as ("Error", "Count") at the zero index position of the sorted error dictionary. And insert column names as ("Username", "INFO", "ERROR") at the zero index position of the sorted per_user dictionary.
theErrors = sorted(theErrors.items(), key=operator.itemgetter(1), reverse=True)
theUsers = sorted(theUsers.items())

# store them in two different files: error_message.csv and user_statistics.csv.
with open('week 7/error_message.csv', 'w') as error_file:
    error_writer = csv.writer(error_file)
    error_writer.writerow(['Error', 'Count'])
    for key, value in theErrors:
        error_writer.writerow([key, value])

# store them in two different files: error_message.csv and user_statistics.csv.
with open('week 7/user_statistics.csv', 'w') as user_file:
    user_writer = csv.writer(user_file)
    user_writer.writerow(['Username', 'INFO', 'ERROR'])
    for key, value in theUsers:
        user_writer.writerow([key, value["INFO"], value["ERROR"]])

print(theErrors)
print(theUsers)
logs.close()
